#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

class SuffixDecomposition {
public:
	long long findTotalFun(vector <int> P, int A0, int X, int Y, int B0, int X1, int Y1, int N) {
		// generator
		vector<long long> A(N), B(N);
		A[0] = A0;
		for (long long i = 1 ; i < N ; i++)
			A[i] = (A[i - 1] * X + Y) % 1812447359  ;

		B[0] = B0 ;
		for (long long i = 1; i < N; i++)
			B[i] = (B[i - 1] * X1 + Y1) % 1812447359 ;
		vector<long long> S(N);
		for (long long i = 0; i < (long long)P.size(); i++)
			S[i] = P[i];
		for (long long i = (long long)P.size(); i < N; i++)
			S[i] = max(A[i], B[i]);
		// end

		stack<long long> s;// stack
		vector<long long> res(N);// final cnt array for every index till rightmost end
		long long nix = LLONG_MAX;
		for (long long i = N - 1; i >= 0; i--) {
			if (s.empty()) {
				s.push(S[i]);
				nix = S[i];
			}
			else {
				if (S[i] < s.top()) {
					s.push(S[i]);
					nix = min(nix, S[i]);
				}
				else {
					long long val = S[i];
					while (!s.empty() and val >= s.top()) {
						s.pop();
					}
					nix = min(nix, S[i]);
					s.push(nix);
				}
			}
			res[i] = s.size();
		}

		long long ans = 0;
		for (long long i = 0; i < N; ++i) {
			ans += res[i];
		}

		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, bool hasAnswer, long long p8) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7;
	cout << "]" << endl;
	SuffixDecomposition *obj;
	long long answer;
	obj = new SuffixDecomposition();
	clock_t startTime = clock();
	answer = obj->findTotalFun(p0, p1, p2, p3, p4, p5, p6, p7);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p8 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p8;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	long long p8;

	{
		// ----- test 0 -----
		int t0[] = {3, 9, 5};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		p2 = 0;
		p3 = 0;
		p4 = 0;
		p5 = 0;
		p6 = 0;
		p7 = 3;
		p8 = 4ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {10};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		p2 = 2;
		p3 = 2;
		p4 = 3;
		p5 = 1;
		p6 = 2;
		p7 = 4;
		p8 = 8ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0.clear() /*{}*/;
		p1 = 1000001;
		p2 = 1000001;
		p3 = 1000001;
		p4 = 5000001;
		p5 = 5000001;
		p6 = 5000001;
		p7 = 4;
		p8 = 6ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0.clear() /*{}*/;
		p1 = 1812447358;
		p2 = 1812447358;
		p3 = 1812447358;
		p4 = 42524;
		p5 = 2565262;
		p6 = 2676642;
		p7 = 6;
		p8 = 7ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0.clear() /*{}*/;
		p1 = 1010;
		p2 = 2010;
		p3 = 3010;
		p4 = 900010;
		p5 = 9000;
		p6 = 76540;
		p7 = 8;
		p8 = 10ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
